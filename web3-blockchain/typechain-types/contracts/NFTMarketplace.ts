/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NFTMarketplace {
  export type CommentStruct = {
    commenter: AddressLike;
    content: string;
    rating: BigNumberish;
    timestamp: BigNumberish;
  };

  export type CommentStructOutput = [
    commenter: string,
    content: string,
    rating: bigint,
    timestamp: bigint
  ] & { commenter: string; content: string; rating: bigint; timestamp: bigint };
}

export interface NFTMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addComment"
      | "auctionBids"
      | "buyNFT"
      | "createNFT"
      | "endAuction"
      | "getAuctionBid"
      | "getAuctionDetails"
      | "getComments"
      | "getSaleDetails"
      | "getTokenExtendedDetails"
      | "idToAuction"
      | "idToSale"
      | "incrementView"
      | "listNFTForSale"
      | "listingPrice"
      | "nftContract"
      | "owner"
      | "placeBid"
      | "renounceOwnership"
      | "resellNFT"
      | "startAuction"
      | "toggleLike"
      | "tokenComments"
      | "tokenExtendedDetails"
      | "tokenLikes"
      | "tokenViews"
      | "transferOwnership"
      | "updateListingPrice"
      | "updateRoyalty"
      | "withdrawListingPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionEnded"
      | "AuctionStarted"
      | "BidPlaced"
      | "CommentAdded"
      | "LikeIncremented"
      | "ListingPriceUpdated"
      | "NFTCreated"
      | "NFTListed"
      | "NFTResold"
      | "NFTSold"
      | "OwnershipTransferred"
      | "RoyaltyUpdated"
      | "ViewIncremented"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addComment",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionBids",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFT",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionBid",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenExtendedDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFTForSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resellNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleLike",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenComments",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenExtendedDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLikes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenViews",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListingPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoyalty",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawListingPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addComment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenExtendedDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idToAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idToSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listNFTForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resellNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggleLike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenExtendedDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenLikes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenViews", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawListingPrice",
    data: BytesLike
  ): Result;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    winner: AddressLike,
    finalPrice: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    winner: string,
    finalPrice: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    winner: string;
    finalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionStartedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seller: AddressLike,
    minBid: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    seller: string,
    minBid: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
    minBid: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, bidder: string, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommentAddedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    commenter: AddressLike,
    content: string,
    rating: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    commenter: string,
    content: string,
    rating: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    commenter: string;
    content: string;
    rating: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LikeIncrementedEvent {
  export type InputTuple = [tokenId: BigNumberish, newLikeCount: BigNumberish];
  export type OutputTuple = [tokenId: bigint, newLikeCount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    newLikeCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingPriceUpdatedEvent {
  export type InputTuple = [newListingPrice: BigNumberish];
  export type OutputTuple = [newListingPrice: bigint];
  export interface OutputObject {
    newListingPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    uri: string,
    category: string,
    collection: string,
    royaltyBasisPoints: BigNumberish,
    descriptionIPFSHash: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    owner: string,
    uri: string,
    category: string,
    collection: string,
    royaltyBasisPoints: bigint,
    descriptionIPFSHash: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    uri: string;
    category: string;
    collection: string;
    royaltyBasisPoints: bigint;
    descriptionIPFSHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTListedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, seller: string, price: bigint];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTResoldEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seller: AddressLike,
    newPrice: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, seller: string, newPrice: bigint];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSoldEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    buyer: AddressLike,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    buyer: string,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    buyer: string;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    newRoyaltyBasisPoints: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, newRoyaltyBasisPoints: bigint];
  export interface OutputObject {
    tokenId: bigint;
    newRoyaltyBasisPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ViewIncrementedEvent {
  export type InputTuple = [tokenId: BigNumberish, newViewCount: BigNumberish];
  export type OutputTuple = [tokenId: bigint, newViewCount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    newViewCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): NFTMarketplace;
  waitForDeployment(): Promise<this>;

  interface: NFTMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addComment: TypedContractMethod<
    [_tokenId: BigNumberish, _content: string, _rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  auctionBids: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  buyNFT: TypedContractMethod<[_tokenId: BigNumberish], [void], "payable">;

  createNFT: TypedContractMethod<
    [
      _uri: string,
      _category: string,
      _collection: string,
      _royaltyBasisPoints: BigNumberish,
      _descriptionIPFSHash: string
    ],
    [bigint],
    "payable"
  >;

  endAuction: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAuctionBid: TypedContractMethod<
    [_tokenId: BigNumberish, _bidder: AddressLike],
    [bigint],
    "view"
  >;

  getAuctionDetails: TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, boolean] & {
        seller: string;
        currentBid: bigint;
        highestBidder: string;
        endTime: bigint;
        started: boolean;
        ended: boolean;
      }
    ],
    "view"
  >;

  getComments: TypedContractMethod<
    [_tokenId: BigNumberish],
    [NFTMarketplace.CommentStructOutput[]],
    "view"
  >;

  getSaleDetails: TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [string, bigint, boolean] & {
        seller: string;
        price: bigint;
        isSold: boolean;
      }
    ],
    "view"
  >;

  getTokenExtendedDetails: TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [string, string, bigint, string] & {
        category: string;
        collection: string;
        royaltyBasisPoints: bigint;
        descriptionIPFSHash: string;
      }
    ],
    "view"
  >;

  idToAuction: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, boolean] & {
        seller: string;
        currentBid: bigint;
        highestBidder: string;
        endTime: bigint;
        started: boolean;
        ended: boolean;
      }
    ],
    "view"
  >;

  idToSale: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        seller: string;
        price: bigint;
        isSold: boolean;
      }
    ],
    "view"
  >;

  incrementView: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  listNFTForSale: TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listingPrice: TypedContractMethod<[], [bigint], "view">;

  nftContract: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<[_tokenId: BigNumberish], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resellNFT: TypedContractMethod<
    [_tokenId: BigNumberish, _newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  startAuction: TypedContractMethod<
    [_tokenId: BigNumberish, _minBid: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  toggleLike: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenComments: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        commenter: string;
        content: string;
        rating: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  tokenExtendedDetails: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string] & {
        category: string;
        collection: string;
        royaltyBasisPoints: bigint;
        descriptionIPFSHash: string;
      }
    ],
    "view"
  >;

  tokenLikes: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  tokenViews: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateListingPrice: TypedContractMethod<
    [_newListingPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRoyalty: TypedContractMethod<
    [_tokenId: BigNumberish, _newRoyaltyBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawListingPrice: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addComment"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _content: string, _rating: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "auctionBids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createNFT"
  ): TypedContractMethod<
    [
      _uri: string,
      _category: string,
      _collection: string,
      _royaltyBasisPoints: BigNumberish,
      _descriptionIPFSHash: string
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAuctionBid"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _bidder: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuctionDetails"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, boolean] & {
        seller: string;
        currentBid: bigint;
        highestBidder: string;
        endTime: bigint;
        started: boolean;
        ended: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComments"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [NFTMarketplace.CommentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSaleDetails"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [string, bigint, boolean] & {
        seller: string;
        price: bigint;
        isSold: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenExtendedDetails"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [
      [string, string, bigint, string] & {
        category: string;
        collection: string;
        royaltyBasisPoints: bigint;
        descriptionIPFSHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "idToAuction"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, boolean] & {
        seller: string;
        currentBid: bigint;
        highestBidder: string;
        endTime: bigint;
        started: boolean;
        ended: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "idToSale"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        seller: string;
        price: bigint;
        isSold: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementView"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "listNFTForSale"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listingPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resellNFT"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startAuction"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _minBid: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleLike"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenComments"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        commenter: string;
        content: string;
        rating: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenExtendedDetails"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string] & {
        category: string;
        collection: string;
        royaltyBasisPoints: bigint;
        descriptionIPFSHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenLikes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenViews"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateListingPrice"
  ): TypedContractMethod<
    [_newListingPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRoyalty"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _newRoyaltyBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawListingPrice"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionStarted"
  ): TypedContractEvent<
    AuctionStartedEvent.InputTuple,
    AuctionStartedEvent.OutputTuple,
    AuctionStartedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "CommentAdded"
  ): TypedContractEvent<
    CommentAddedEvent.InputTuple,
    CommentAddedEvent.OutputTuple,
    CommentAddedEvent.OutputObject
  >;
  getEvent(
    key: "LikeIncremented"
  ): TypedContractEvent<
    LikeIncrementedEvent.InputTuple,
    LikeIncrementedEvent.OutputTuple,
    LikeIncrementedEvent.OutputObject
  >;
  getEvent(
    key: "ListingPriceUpdated"
  ): TypedContractEvent<
    ListingPriceUpdatedEvent.InputTuple,
    ListingPriceUpdatedEvent.OutputTuple,
    ListingPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTCreated"
  ): TypedContractEvent<
    NFTCreatedEvent.InputTuple,
    NFTCreatedEvent.OutputTuple,
    NFTCreatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTListed"
  ): TypedContractEvent<
    NFTListedEvent.InputTuple,
    NFTListedEvent.OutputTuple,
    NFTListedEvent.OutputObject
  >;
  getEvent(
    key: "NFTResold"
  ): TypedContractEvent<
    NFTResoldEvent.InputTuple,
    NFTResoldEvent.OutputTuple,
    NFTResoldEvent.OutputObject
  >;
  getEvent(
    key: "NFTSold"
  ): TypedContractEvent<
    NFTSoldEvent.InputTuple,
    NFTSoldEvent.OutputTuple,
    NFTSoldEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyUpdated"
  ): TypedContractEvent<
    RoyaltyUpdatedEvent.InputTuple,
    RoyaltyUpdatedEvent.OutputTuple,
    RoyaltyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ViewIncremented"
  ): TypedContractEvent<
    ViewIncrementedEvent.InputTuple,
    ViewIncrementedEvent.OutputTuple,
    ViewIncrementedEvent.OutputObject
  >;

  filters: {
    "AuctionEnded(uint256,address,uint256)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "AuctionStarted(uint256,address,uint256,uint256)": TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;
    AuctionStarted: TypedContractEvent<
      AuctionStartedEvent.InputTuple,
      AuctionStartedEvent.OutputTuple,
      AuctionStartedEvent.OutputObject
    >;

    "BidPlaced(uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "CommentAdded(uint256,address,string,uint8,uint256)": TypedContractEvent<
      CommentAddedEvent.InputTuple,
      CommentAddedEvent.OutputTuple,
      CommentAddedEvent.OutputObject
    >;
    CommentAdded: TypedContractEvent<
      CommentAddedEvent.InputTuple,
      CommentAddedEvent.OutputTuple,
      CommentAddedEvent.OutputObject
    >;

    "LikeIncremented(uint256,uint256)": TypedContractEvent<
      LikeIncrementedEvent.InputTuple,
      LikeIncrementedEvent.OutputTuple,
      LikeIncrementedEvent.OutputObject
    >;
    LikeIncremented: TypedContractEvent<
      LikeIncrementedEvent.InputTuple,
      LikeIncrementedEvent.OutputTuple,
      LikeIncrementedEvent.OutputObject
    >;

    "ListingPriceUpdated(uint256)": TypedContractEvent<
      ListingPriceUpdatedEvent.InputTuple,
      ListingPriceUpdatedEvent.OutputTuple,
      ListingPriceUpdatedEvent.OutputObject
    >;
    ListingPriceUpdated: TypedContractEvent<
      ListingPriceUpdatedEvent.InputTuple,
      ListingPriceUpdatedEvent.OutputTuple,
      ListingPriceUpdatedEvent.OutputObject
    >;

    "NFTCreated(uint256,address,string,string,string,uint256,string)": TypedContractEvent<
      NFTCreatedEvent.InputTuple,
      NFTCreatedEvent.OutputTuple,
      NFTCreatedEvent.OutputObject
    >;
    NFTCreated: TypedContractEvent<
      NFTCreatedEvent.InputTuple,
      NFTCreatedEvent.OutputTuple,
      NFTCreatedEvent.OutputObject
    >;

    "NFTListed(uint256,address,uint256)": TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;
    NFTListed: TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;

    "NFTResold(uint256,address,uint256)": TypedContractEvent<
      NFTResoldEvent.InputTuple,
      NFTResoldEvent.OutputTuple,
      NFTResoldEvent.OutputObject
    >;
    NFTResold: TypedContractEvent<
      NFTResoldEvent.InputTuple,
      NFTResoldEvent.OutputTuple,
      NFTResoldEvent.OutputObject
    >;

    "NFTSold(uint256,address,address,uint256)": TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
    NFTSold: TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoyaltyUpdated(uint256,uint256)": TypedContractEvent<
      RoyaltyUpdatedEvent.InputTuple,
      RoyaltyUpdatedEvent.OutputTuple,
      RoyaltyUpdatedEvent.OutputObject
    >;
    RoyaltyUpdated: TypedContractEvent<
      RoyaltyUpdatedEvent.InputTuple,
      RoyaltyUpdatedEvent.OutputTuple,
      RoyaltyUpdatedEvent.OutputObject
    >;

    "ViewIncremented(uint256,uint256)": TypedContractEvent<
      ViewIncrementedEvent.InputTuple,
      ViewIncrementedEvent.OutputTuple,
      ViewIncrementedEvent.OutputObject
    >;
    ViewIncremented: TypedContractEvent<
      ViewIncrementedEvent.InputTuple,
      ViewIncrementedEvent.OutputTuple,
      ViewIncrementedEvent.OutputObject
    >;
  };
}
